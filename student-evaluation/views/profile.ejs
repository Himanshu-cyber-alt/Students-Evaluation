<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Profile</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.3/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        body {
            background-color: #f8f9fa;
        }
        .profile-header {
            background-color: #007bff;
            color: white;
            padding: 30px 0;
            border-radius: 0 0 20px 20px;
            margin-bottom: 30px;
        }
        .chart-container {
            position: relative;
            height: 300px;
            margin-bottom: 20px;
        }
        .stat-card {
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: transform 0.3s;
            margin-bottom: 20px;
        }
        .stat-card:hover {
            transform: translateY(-5px);
        }
        .course-item, .skill-item {
            display: flex;
            align-items: center;
            padding: 8px 15px;
            margin-bottom: 10px;
            background-color: #f8f9fa;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .course-item i, .skill-item i {
            font-size: 1.5rem;
            margin-right: 15px;
        }
        .skill-level {
            margin-left: auto;
            padding: 3px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
        }
        .beginner { background-color: #ffeeba; }
        .intermediate { background-color: #c3e6cb; }
        .advanced { background-color: #b8daff; }
        .expert { background-color: #d6d8db; }
        .semester-badge {
            font-size: 1.2rem;
            padding: 10px 20px;
            border-radius: 50px;
            background-color: #007bff;
            color: white;
            margin: 10px 0;
            display: inline-block;
        }
        .progress-title {
            margin-bottom: 15px;
        }
        .academic-info {
            padding: 20px;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="profile-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-2 text-center">
                    <img src="/api/placeholder/150/150" alt="Profile" class="rounded-circle img-fluid border border-5 border-white">
                </div>
                <div class="col-md-10">
                    <h1><%= user.name || 'Student Name' %></h1>
                    <p class="lead"><%= user.Branch || 'Computer Science Engineering' %></p>
                    <div class="semester-badge">
                        <i class="fas fa-calendar-alt"></i> Semester <%= user.Semester || '3' %>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="container">
        <!-- Academic Performance Section -->
        <div class="row">
            <div class="col-md-12">
                <div class="academic-info">
                    <h3 class="mb-4"><i class="fas fa-chart-line"></i> Academic Performance</h3>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="chart-container">
                                <canvas id="gpaChart"></canvas>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="stat-card card text-center p-4">
                                        <h2><%= user.Cgpa || '8.5' %></h2>
                                        <p class="text-muted">CGPA</p>
                                        <div class="progress">
                                            <div class="progress-bar bg-success" role="progressbar" 
                                                style="width: <%= (user.Cgpa * 10) || 85 %>%" 
                                                aria-valuenow="<%= user.Cgpa || 8.5 %>" 
                                                aria-valuemin="0" 
                                                aria-valuemax="10">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="stat-card card text-center p-4">
                                        <h2><%= user.Sgpa || '9.0' %></h2>
                                        <p class="text-muted">SGPA (Current)</p>
                                        <div class="progress">
                                            <div class="progress-bar bg-primary" role="progressbar" 
                                                style="width: <%= (user.Sgpa * 10) || 90 %>%" 
                                                aria-valuenow="<%= user.Sgpa || 9.0 %>" 
                                                aria-valuemin="0" 
                                                aria-valuemax="10">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-4">
                                <div class="col-md-12">
                                    <div class="stat-card card p-4">
                                        <h5 class="progress-title">Overall Progress</h5>
                                        <% const semesterProgress = ((user.Semester || 3) / 8) * 100; %>
                                        <div class="progress mb-3">
                                            <div class="progress-bar bg-info" role="progressbar" 
                                                style="width: <%= semesterProgress %>%" 
                                                aria-valuenow="<%= semesterProgress %>" 
                                                aria-valuemin="0" 
                                                aria-valuemax="100">
                                                <%= semesterProgress.toFixed(0) %>% Complete
                                            </div>
                                        </div>
                                        <p class="text-muted">Semester <%= user.Semester || '3' %> of 8</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Courses & Skills Section -->
        <div class="row">
            <!-- Courses -->
            <div class="col-md-6">
                <div class="card stat-card">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0"><i class="fas fa-book"></i> Courses Completed</h4>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="coursesChart"></canvas>
                        </div>
                        <h5 class="mt-4 mb-3">Course List</h5>
                        <div class="courses-container">
                            <% if (user.Courses && user.Courses.length) { %>
                                <% user.Courses.forEach(course => { %>
                                    <div class="course-item">
                                        <% let icon = "fas fa-book"; %>
                                        <% if (course.toLowerCase().includes("cyber")) { icon = "fas fa-shield-alt"; } %>
                                        <% if (course.toLowerCase().includes("aws")) { icon = "fab fa-aws"; } %>
                                        <% if (course.toLowerCase().includes("ccna")) { icon = "fas fa-network-wired"; } %>
                                        <% if (course.toLowerCase().includes("python")) { icon = "fab fa-python"; } %>
                                        <% if (course.toLowerCase().includes("machine learning")) { icon = "fas fa-robot"; } %>
                                        <% if (course.toLowerCase().includes("data")) { icon = "fas fa-database"; } %>
                                        <% if (course.toLowerCase().includes("web")) { icon = "fas fa-code"; } %>
                                        <% if (course.toLowerCase().includes("cloud")) { icon = "fas fa-cloud"; } %>
                                        <% if (course.toLowerCase().includes("ai")) { icon = "fas fa-brain"; } %>
                                        <i class="<%= icon %>"></i>
                                        <span><%= course %></span>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="course-item">
                                    <i class="fas fa-shield-alt"></i>
                                    <span>Cybersecurity</span>
                                </div>
                                <div class="course-item">
                                    <i class="fab fa-aws"></i>
                                    <span>AWS Certification</span>
                                </div>
                                <div class="course-item">
                                    <i class="fas fa-network-wired"></i>
                                    <span>CCNA</span>
                                </div>
                                <div class="course-item">
                                    <i class="fab fa-python"></i>
                                    <span>Python Programming</span>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Skills -->
            <div class="col-md-6">
                <div class="card stat-card">
                    <div class="card-header bg-success text-white">
                        <h4 class="mb-0"><i class="fas fa-code"></i> Technical Skills</h4>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="skillsChart"></canvas>
                        </div>
                        <h5 class="mt-4 mb-3">Skill List</h5>
                        <div class="skills-container">
                            <% if (user.Skills && user.Skills.length) { %>
                                <% user.Skills.forEach((skill, index) => { %>
                                    <div class="skill-item">
                                        <% let icon = "fas fa-star"; %>
                                        <% if (skill.toLowerCase().includes("node")) { icon = "fab fa-node-js"; } %>
                                        <% if (skill.toLowerCase().includes("react")) { icon = "fab fa-react"; } %>
                                        <% if (skill.toLowerCase().includes("mongo")) { icon = "fas fa-database"; } %>
                                        <% if (skill.toLowerCase().includes("sql")) { icon = "fas fa-database"; } %>
                                        <% if (skill.toLowerCase().includes("express")) { icon = "fab fa-node-js"; } %>
                                        <% if (skill.toLowerCase().includes("javascript")) { icon = "fab fa-js-square"; } %>
                                        <% if (skill.toLowerCase().includes("html")) { icon = "fab fa-html5"; } %>
                                        <% if (skill.toLowerCase().includes("python")) { icon = "fab fa-python"; } %>
                                        <% if (skill.toLowerCase().includes("java")) { icon = "fab fa-java"; } %>
                                        <% if (skill.toLowerCase().includes("docker")) { icon = "fab fa-docker"; } %>
                                        <% if (skill.toLowerCase().includes("git")) { icon = "fab fa-git-alt"; } %>
                                        <i class="<%= icon %>"></i>
                                        <span><%= skill %></span>
                                        <% 
                                            const level = user.SkillLevels && user.SkillLevels[index] 
                                                ? user.SkillLevels[index] 
                                                : "Intermediate"; 
                                            const levelClass = level.toLowerCase();
                                        %>
                                        <span class="skill-level <%= levelClass %>"><%= level %></span>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="skill-item">
                                    <i class="fab fa-node-js"></i>
                                    <span>Node.js</span>
                                    <span class="skill-level intermediate">Intermediate</span>
                                </div>
                                <div class="skill-item">
                                    <i class="fab fa-react"></i>
                                    <span>React</span>
                                    <span class="skill-level advanced">Advanced</span>
                                </div>
                                <div class="skill-item">
                                    <i class="fas fa-database"></i>
                                    <span>MongoDB</span>
                                    <span class="skill-level intermediate">Intermediate</span>
                                </div>
                                <div class="skill-item">
                                    <i class="fas fa-database"></i>
                                    <span>PostgreSQL</span>
                                    <span class="skill-level beginner">Beginner</span>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Overall Comparison -->
        <div class="row mb-5">
            <div class="col-md-12">
                <div class="card stat-card">
                    <div class="card-header bg-info text-white">
                        <h4 class="mb-0"><i class="fas fa-chart-bar"></i> Skills Distribution</h4>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="skillDistributionChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Sample GPA data (to be replaced with actual user data)
            const semesters = [];
            const cgpaData = [];
            const sgpaData = [];
            
            // Get user semester from EJS variable
            const currentSemester = <%= user.Semester || 3 %>;
            const currentCGPA = <%= user.Cgpa || 8.5 %>;
            const currentSGPA = <%= user.Sgpa || 9.0 %>;
            
            // Generate historical GPA data for visualization
            for (let i = 1; i <= currentSemester; i++) {
                semesters.push('Sem ' + i);
                
                // For demo purposes: Generate random GPA data that leads to the current values
                if (i < currentSemester) {
                    // Generate random but reasonable SGPA
                    const randomSGPA = (Math.random() * 2 + 7).toFixed(1);
                    sgpaData.push(randomSGPA);
                    
                    // Calculate approximate CGPAs leading to current CGPA
                    const approximateCGPA = (
                        (currentCGPA * currentSemester - (currentSemester - i) * (Math.random() * 0.5 + 0.5)) / i
                    ).toFixed(1);
                    cgpaData.push(approximateCGPA);
                } else {
                    // Current semester values
                    sgpaData.push(currentSGPA);
                    cgpaData.push(currentCGPA);
                }
            }
            
            // GPA Chart
            const gpaCtx = document.getElementById('gpaChart').getContext('2d');
            const gpaChart = new Chart(gpaCtx, {
                type: 'line',
                data: {
                    labels: semesters,
                    datasets: [
                        {
                            label: 'CGPA',
                            data: cgpaData,
                            backgroundColor: 'rgba(0, 123, 255, 0.1)',
                            borderColor: 'rgba(0, 123, 255, 1)',
                            borderWidth: 2,
                            tension: 0.3,
                            fill: true
                        },
                        {
                            label: 'SGPA',
                            data: sgpaData,
                            backgroundColor: 'rgba(40, 167, 69, 0.1)',
                            borderColor: 'rgba(40, 167, 69, 1)',
                            borderWidth: 2,
                            tension: 0.3,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false,
                            min: 6,
                            max: 10
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'GPA Progression'
                        }
                    }
                }
            });
            
            // Courses Chart
            const coursesData = {
                labels: [],
                datasets: [{
                    data: [],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.7)',
                        'rgba(54, 162, 235, 0.7)',
                        'rgba(255, 206, 86, 0.7)',
                        'rgba(75, 192, 192, 0.7)',
                        'rgba(153, 102, 255, 0.7)',
                        'rgba(255, 159, 64, 0.7)',
                        'rgba(199, 199, 199, 0.7)'
                    ],
                    borderWidth: 1
                }]
            };
            
            <% if (user.Courses && user.Courses.length) { %>
                // Group courses by category
                const courseCategories = {
                    'Programming': 0,
                    'Security': 0,
                    'Cloud': 0,
                    'Networking': 0,
                    'Data': 0,
                    'Web': 0,
                    'Other': 0
                };
                
                <% user.Courses.forEach(course => { %>
                    if ("<%= course %>".toLowerCase().includes("python") || 
                        "<%= course %>".toLowerCase().includes("java") || 
                        "<%= course %>".toLowerCase().includes("program")) {
                        courseCategories['Programming']++;
                    } else if ("<%= course %>".toLowerCase().includes("cyber") || 
                              "<%= course %>".toLowerCase().includes("security")) {
                        courseCategories['Security']++;
                    } else if ("<%= course %>".toLowerCase().includes("aws") || 
                              "<%= course %>".toLowerCase().includes("cloud")) {
                        courseCategories['Cloud']++;
                    } else if ("<%= course %>".toLowerCase().includes("ccna") || 
                              "<%= course %>".toLowerCase().includes("network")) {
                        courseCategories['Networking']++;
                    } else if ("<%= course %>".toLowerCase().includes("data") || 
                              "<%= course %>".toLowerCase().includes("database") || 
                              "<%= course %>".toLowerCase().includes("sql")) {
                        courseCategories['Data']++;
                    } else if ("<%= course %>".toLowerCase().includes("web") || 
                              "<%= course %>".toLowerCase().includes("frontend") || 
                              "<%= course %>".toLowerCase().includes("html")) {
                        courseCategories['Web']++;
                    } else {
                        courseCategories['Other']++;
                    }
                <% }); %>
                
                // Convert to chart data
                Object.keys(courseCategories).forEach(category => {
                    if (courseCategories[category] > 0) {
                        coursesData.labels.push(category);
                        coursesData.datasets[0].data.push(courseCategories[category]);
                    }
                });
            <% } else { %>
                // Sample data
                coursesData.labels = ['Programming', 'Security', 'Cloud', 'Networking'];
                coursesData.datasets[0].data = [2, 1, 1, 1];
            <% } %>
            
            const coursesCtx = document.getElementById('coursesChart').getContext('2d');
            const coursesChart = new Chart(coursesCtx, {
                type: 'pie',
                data: coursesData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        title: {
                            display: true,
                            text: 'Course Categories'
                        }
                    }
                }
            });
            
            // Skills Chart - radar chart
            const skillNames = [];
            const skillLevels = [];
            
            <% if (user.Skills && user.Skills.length) { %>
                <% user.Skills.forEach((skill, index) => { %>
                    skillNames.push("<%= skill %>");
                    <% 
                        const level = user.SkillLevels && user.SkillLevels[index] 
                            ? user.SkillLevels[index] 
                            : "Intermediate";
                        let levelValue;
                        if (level === "Beginner") levelValue = 2.5;
                        else if (level === "Intermediate") levelValue = 5;
                        else if (level === "Advanced") levelValue = 7.5;
                        else levelValue = 10; // Expert
                    %>
                    skillLevels.push(<%= levelValue %>);
                <% }); %>
            <% } else { %>
                // Sample data
                skillNames.push("Node.js", "React", "MongoDB", "PostgreSQL");
                skillLevels.push(5, 7.5, 5, 2.5);
            <% } %>
            
            const skillsCtx = document.getElementById('skillsChart').getContext('2d');
            const skillsChart = new Chart(skillsCtx, {
                type: 'radar',
                data: {
                    labels: skillNames,
                    datasets: [{
                        label: 'Skill Level',
                        data: skillLevels,
                        backgroundColor: 'rgba(40, 167, 69, 0.2)',
                        borderColor: 'rgba(40, 167, 69, 1)',
                        pointBackgroundColor: 'rgba(40, 167, 69, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(40, 167, 69, 1)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            angleLines: {
                                display: true
                            },
                            suggestedMin: 0,
                            suggestedMax: 10
                        }
                    }
                }
            });
            
            // Skill Distribution Chart
            const skillDistributionCtx = document.getElementById('skillDistributionChart').getContext('2d');
            
            // Count skill levels
            const skillLevelCounts = {
                'Beginner': 0,
                'Intermediate': 0, 
                'Advanced': 0,
                'Expert': 0
            };
            
            <% if (user.SkillLevels && user.SkillLevels.length) { %>
                <% user.SkillLevels.forEach(level => { %>
                    skillLevelCounts["<%= level %>"]++;
                <% }); %>
            <% } else { %>
                // Sample data
                skillLevelCounts.Beginner = 1;
                skillLevelCounts.Intermediate = 2;
                skillLevelCounts.Advanced = 1;
                skillLevelCounts.Expert = 0;
            <% } %>
            
            const skillDistributionChart = new Chart(skillDistributionCtx, {
                type: 'bar',
                data: {
                    labels: ['Beginner', 'Intermediate', 'Advanced', 'Expert'],
                    datasets: [{
                        label: 'Number of Skills',
                        data: [
                            skillLevelCounts.Beginner,
                            skillLevelCounts.Intermediate,
                            skillLevelCounts.Advanced,
                            skillLevelCounts.Expert
                        ],
                        backgroundColor: [
                            'rgba(255, 206, 86, 0.7)',
                            'rgba(75, 192, 192, 0.7)',
                            'rgba(54, 162, 235, 0.7)',
                            'rgba(153, 102, 255, 0.7)'
                        ],
                        borderColor: [
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(153, 102, 255, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    }
                }
            });
        });
    </script>
</body>
</html>